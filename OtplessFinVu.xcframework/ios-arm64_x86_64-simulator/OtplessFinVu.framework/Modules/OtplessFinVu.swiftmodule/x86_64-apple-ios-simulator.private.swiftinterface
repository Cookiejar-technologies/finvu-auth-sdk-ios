// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 6 -enforce-exclusivity=checked -O -module-name OtplessFinVu
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AuthenticationServices
import CommonCrypto
import Foundation
import LocalAuthentication
import Network
@_exported import OtplessFinVu
import Security
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
public struct RedirectResult {
  public var url: Foundation.URL?
  public let cookies: [Foundation.HTTPCookie]?
}
public struct ConnectionResponse {
  public var status: Swift.Int
  public let body: Foundation.Data?
}
public enum LogType : Swift.String, @unchecked Swift.Sendable {
  case API_RESPONSE_FAILURE
  case CLASS_DEALLOC_IN_CLOSURE
  case API_REQUEST_AND_RESPONSE
  case IS_PASSKEY_SUPPORTED
  case POLLING_STOPPED
  case POLLING_STARTED
  case POLLING_RESPONSE
  case INVALID_DEEPLINK
  case SNA_RESPONSE
  case EVENT_API_ERROR
  case EVENT_CREATING_FAILED
  public static func < (lhs: OtplessFinVu.LogType, rhs: OtplessFinVu.LogType) -> Swift.Bool
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor public protocol OtplessLoggerDelegate : ObjectiveC.NSObjectProtocol {
  @_Concurrency.MainActor func log(message: Swift.String, type: OtplessFinVu.LogType)
}
public struct OneTapIdentity : Swift.Sendable {
  public let name: Swift.String?
  public let identity: Swift.String
  public let uiId: Swift.String
  public let logo: Swift.String?
}
@_inheritsConvenienceInitializers @objc final public class Otpless : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public static let shared: OtplessFinVu.Otpless
  final public func setOneTapDataDelegate(_ oneTapDataDelegate: (any OtplessFinVu.OneTapDataDelegate)?)
  @objc final public func initialise(withAppId appId: Swift.String, loginUri: Swift.String? = nil, vc: UIKit.UIViewController, shouldShowOtplessOneTapUI: Swift.Bool = true)
  @objc final public func isOtplessDeeplink(url: Foundation.URL) -> Swift.Bool
  @objc final public func start(withRequest otplessRequest: OtplessFinVu.OtplessRequest) async
  @objc final public func authorizeViaPasskey(withRequest otplessRequest: OtplessFinVu.OtplessRequest, windowScene: UIKit.UIWindowScene) async
  @objc final public func handleDeeplink(_ url: Foundation.URL) async
  @_Concurrency.MainActor @objc final public func registerFBApp(_ application: UIKit.UIApplication, didFinishLaunchingWithOptions launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  @_Concurrency.MainActor @objc final public func registerFBApp(_ app: UIKit.UIApplication, open url: Foundation.URL, options: [UIKit.UIApplication.OpenURLOptionsKey : Any] = [:])
  @available(iOS 13.0, *)
  @_Concurrency.MainActor @objc final public func registerFBApp(openURLContexts URLContexts: Swift.Set<UIKit.UIOpenURLContext>) async
  final public func commitOtplessResponse(_ otplessResponse: OtplessFinVu.OtplessResponse)
  final public func performOneTap(forIdentity oneTapIdentity: OtplessFinVu.OneTapIdentity) async
  @objc final public func cleanup()
  @objc final public func isSdkReady() -> Swift.Bool
  @objc final public func objcCommit(_ otplessResponse: Swift.String?)
  @objc override dynamic public init()
  @objc deinit
}
extension OtplessFinVu.Otpless {
  final public func setResponseDelegate(_ otplessResponseDelegate: any OtplessFinVu.OtplessResponseDelegate)
  @objc final public func setOtplessObjcResponseDelegate(_ otplessResponseDelegate: @escaping (Swift.String) -> Swift.Void)
  final public func setLoggerDelegate(_ otplessLoggerDelegate: any OtplessFinVu.OtplessLoggerDelegate)
  final public func clearAll()
}
@_Concurrency.MainActor public protocol OtplessResponseDelegate : ObjectiveC.NSObjectProtocol {
  @_Concurrency.MainActor func onResponse(_ response: OtplessFinVu.OtplessResponse)
}
@_Concurrency.MainActor public protocol OneTapDataDelegate : ObjectiveC.NSObjectProtocol {
  @_Concurrency.MainActor func onOneTapData(_ identities: [OtplessFinVu.OneTapIdentity]?)
}
public enum OtplessChannelType : Swift.String, Swift.CaseIterable {
  case WHATSAPP
  case GOOGLE_SDK
  case FACEBOOK_SDK
  case APPLE_SDK
  case APPLE
  case GMAIL
  case TWITTER
  case DISCORD
  case SLACK
  case FACEBOOK
  case LINKEDIN
  case MICROSOFT
  case LINE
  case LINEAR
  case NOTION
  case TWITCH
  case GITHUB
  case BITBUCKET
  case ATLASSIAN
  case GITLAB
  case TRUE_CALLER
  public static func fromString(_ value: Swift.String) -> OtplessFinVu.OtplessChannelType
  public init?(rawValue: Swift.String)
  public typealias AllCases = [OtplessFinVu.OtplessChannelType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [OtplessFinVu.OtplessChannelType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class OtplessChannelTypeObjC : ObjectiveC.NSObject {
  @objc public static let WHATSAPP: Swift.String
  @objc public static let GOOGLE_SDK: Swift.String
  @objc public static let FACEBOOK_SDK: Swift.String
  @objc public static let APPLE_SDK: Swift.String
  @objc public static let APPLE: Swift.String
  @objc public static let GMAIL: Swift.String
  @objc public static let TWITTER: Swift.String
  @objc public static let DISCORD: Swift.String
  @objc public static let SLACK: Swift.String
  @objc public static let FACEBOOK: Swift.String
  @objc public static let LINKEDIN: Swift.String
  @objc public static let MICROSOFT: Swift.String
  @objc public static let LINE: Swift.String
  @objc public static let LINEAR: Swift.String
  @objc public static let NOTION: Swift.String
  @objc public static let TWITCH: Swift.String
  @objc public static let GITHUB: Swift.String
  @objc public static let BITBUCKET: Swift.String
  @objc public static let ATLASSIAN: Swift.String
  @objc public static let GITLAB: Swift.String
  @objc public static let TRUE_CALLER: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class OtplessRequest : ObjectiveC.NSObject, @unchecked Swift.Sendable {
  @objc public func set(phoneNumber: Swift.String, withCountryCode countryCode: Swift.String)
  @objc public func set(email: Swift.String)
  public func set(channelType: OtplessFinVu.OtplessChannelType)
  @objc public func set(objcChannelType: Swift.String)
  @objc public func set(requestIdForWebAuthn requestId: Swift.String)
  @objc public func set(otp: Swift.String)
  @objc public func set(otpExpiry: Swift.String)
  @objc public func set(otpLength: Swift.String)
  @objc public func set(deliveryChannelForTransaction deliveryChannel: Swift.String)
  @objc public func set(locale: Swift.String)
  @objc public func set(code: Swift.String)
  @objc public func set(extras: [Swift.String : Swift.String])
  @objc public func set(tid: Swift.String)
  @objc public func getRequestId() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public struct OtplessResponse : @unchecked Swift.Sendable {
  public let responseType: OtplessFinVu.ResponseTypes
  public let response: [Swift.String : Any]?
  public let statusCode: Swift.Int
  public init(responseType: OtplessFinVu.ResponseTypes, response: [Swift.String : Any]?, statusCode: Swift.Int)
  public func toString() -> Swift.String
}
public enum ResponseTypes : Swift.String {
  case INITIATE, VERIFY, ONETAP, FALLBACK_TRIGGERED, FAILED, SDK_READY, DELIVERY_STATUS, AUTH_TERMINATED
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SdkState : Swift.String {
  case READY, NOT_READY
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension OtplessFinVu.LogType : Swift.Equatable {}
extension OtplessFinVu.LogType : Swift.Hashable {}
extension OtplessFinVu.LogType : Swift.RawRepresentable {}
extension OtplessFinVu.OtplessChannelType : Swift.Equatable {}
extension OtplessFinVu.OtplessChannelType : Swift.Hashable {}
extension OtplessFinVu.OtplessChannelType : Swift.RawRepresentable {}
extension OtplessFinVu.ResponseTypes : Swift.Equatable {}
extension OtplessFinVu.ResponseTypes : Swift.Hashable {}
extension OtplessFinVu.ResponseTypes : Swift.RawRepresentable {}
extension OtplessFinVu.SdkState : Swift.Equatable {}
extension OtplessFinVu.SdkState : Swift.Hashable {}
extension OtplessFinVu.SdkState : Swift.RawRepresentable {}
