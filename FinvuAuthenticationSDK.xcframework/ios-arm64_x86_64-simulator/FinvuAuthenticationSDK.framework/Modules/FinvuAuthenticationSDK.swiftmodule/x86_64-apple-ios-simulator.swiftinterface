// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios16.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FinvuAuthenticationSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import FinvuAuthenticationSDK
import Foundation
import OtplessFinVu
import Swift
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum FinvuAuthEnvironment : Swift.Int, Swift.CaseIterable {
  case development
  case production
  public var description: Swift.String {
    get
  }
  public var isDebugMode: Swift.Bool {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [FinvuAuthenticationSDK.FinvuAuthEnvironment]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [FinvuAuthenticationSDK.FinvuAuthEnvironment] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class FinvuAuthenticationNativeWrapper {
  public static let shared: FinvuAuthenticationSDK.FinvuAuthenticationNativeWrapper
  public func setup(viewController: UIKit.UIViewController, environment: FinvuAuthenticationSDK.FinvuAuthEnvironment)
  public func initAuth(config: [Swift.String : Any], completion: @escaping (Swift.Result<[Swift.String : Any], FinvuAuthenticationSDK.FinvuAuthException>) -> Swift.Void)
  public func startAuth(phoneNumber: Swift.String, completion: @escaping (Swift.Result<[Swift.String : Any], FinvuAuthenticationSDK.FinvuAuthException>) -> Swift.Void)
  public func verifyOtp(phoneNumber: Swift.String, otp: Swift.String, completion: @escaping (Swift.Result<[Swift.String : Any], FinvuAuthenticationSDK.FinvuAuthException>) -> Swift.Void)
  public func cleanupAll()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FinvuAuthenticationWrapper {
  public static let shared: FinvuAuthenticationSDK.FinvuAuthenticationWrapper
  public func setupWebView(_ webView: WebKit.WKWebView, viewController: UIKit.UIViewController, environment: FinvuAuthenticationSDK.FinvuAuthEnvironment)
  public func cleanup()
  public func cleanupAll()
  @objc deinit
}
public struct FinvuAuthException : Swift.Error, Swift.Codable {
  public let status: Swift.String
  public let errorCode: Swift.String
  public let errorMessage: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public enum FinvuAuthHttpError : Swift.Error, Foundation.LocalizedError {
  case invalidURL(Swift.String)
  case encodingError(any Swift.Error)
  case networkError(any Swift.Error)
  case invalidResponse
  case httpError(statusCode: Swift.Int, data: Foundation.Data?)
  case decodingError(any Swift.Error)
  public var errorDescription: Swift.String? {
    get
  }
}
extension FinvuAuthenticationSDK.FinvuAuthEnvironment : Swift.Equatable {}
extension FinvuAuthenticationSDK.FinvuAuthEnvironment : Swift.Hashable {}
extension FinvuAuthenticationSDK.FinvuAuthEnvironment : Swift.RawRepresentable {}
